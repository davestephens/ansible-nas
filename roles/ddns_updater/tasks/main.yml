---
- name: Start DDNS Updater
  block:
  - name: Create ddns_updater Directories
    file:
      path: "{{ item }}"
      owner: "1000"
      group: "1000"
      state: directory
      mode: 0700
    with_items:
      - "{{ ddns_updater_config_directory }}"

  - name: DDNS Updater config
    template:
      src: config.json
      dest: "{{ ddns_updater_config_directory }}/config.json"
      owner: "1000"
      group: "1000"
      mode: 0700
    register: template_files_result

  - name: Create ddns_updater Docker Container
    docker_container:
      name: ddns_updater
      image: qmcgaw/ddns-updater
      pull: true
      volumes:
        - "{{ ddns_updater_config_directory }}:/updater/data:rw"
      ports:
        - "{{ ddns_updater_port }}:8000"
      env:
        TZ: "{{ ansible_nas_timezone }}"
      restart_policy: unless-stopped
      memory: "{{ ddns_updater_memory }}"
      labels:
        traefik.enable: "{{ ddns_updater_available_externally | string }}"
        traefik.http.routers.pyload.rule: "Host(`{{ ddns_updater_hostname }}.{{ ansible_nas_domain }}`)"
        traefik.http.routers.pyload.tls.certresolver: "letsencrypt"
        traefik.http.routers.pyload.tls.domains[0].main: "{{ ansible_nas_domain }}"
        traefik.http.routers.pyload.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
        traefik.http.services.pyload.loadbalancer.server.port: "8000"
  when: ddns_updater_enabled is true

- name: Stop DDNS Updater
  block:
    - name: Stop DDNS Updater
      docker_container:
        name: "{{ ddns_updater_container_name }}"
        state: absent
  when: ddns_updater_enabled is false
  