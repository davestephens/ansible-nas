---
- name: Start Netdata
  block:
    - name: Get docker group id
      ansible.builtin.group:
        name: docker
      register: docker_group

    - name: Create netdata group
      become: true
      ansible.builtin.group:
        name: netdata
        gid: "201"
        state: present
      register: netdata_group

    - name: Create netdata user
      become: true
      ansible.builtin.user:
        name: netdata
        state: present
        system: yes
        create_home: no
        group: netdata
        groups:
          - "{{ docker_group.gid }}"
        uid: "201"
        shell: /usr/sbin/nologin
      register: netdata_user

    - name: Create Directories
      become: true
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0750"
        owner: "netdata"
        group: "netdata"
      with_items: "{{ netdata_directories + netdata_directories_custom | unique | sort }}"
      when: netdata_user.state == "present" and netdata_group.state == "present"
      ignore_errors: "{{ ansible_check_mode }}"

    - name: Template Files
      become: true
      register: template_config
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        force: "{{ item.force | default(false) }}"
        mode: "{{ item.mode | default('0600') }}"
      with_items: "{{ netdata_template_files + netdata_template_files_custom | unique | sort }}"
      ignore_errors: "{{ ansible_check_mode }}"

    - name: Netdata Docker Container
      community.docker.docker_container:
        name: "{{ netdata_container_name }}"
        image: "{{ netdata_image_name }}:{{ netdata_image_version }}"
        hostname: "{{ ansible_nas_hostname }}.{{ ansible_nas_domain }}"
        state: started
        pull: true
        ports:
          - "{{ netdata_port }}:19999"
        volumes: "{{ netdata_volumes + netdata_volumes_custom | unique | sort }}"
        env:
          PGID: "{{ docker_group.gid }}"
        capabilities:
          - SYS_PTRACE
        security_opts:
          - apparmor:unconfined
        restart_policy: unless-stopped
        memory: "{{ netdata_memory }}"
        recreate: "{{ template_config is changed }}"
        labels:
          traefik.enable: "{{ netdata_available_externally | string }}"
          traefik.http.routers.netdata.rule: "Host(`{{ netdata_hostname }}.{{ ansible_nas_domain }}`)"
          traefik.http.routers.netdata.tls.certresolver: "letsencrypt"
          traefik.http.routers.netdata.tls.domains[0].main: "{{ ansible_nas_domain }}"
          traefik.http.routers.netdata.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
          traefik.http.services.netdata.loadbalancer.server.port: "19999"
  when: netdata_enabled is true

- name: Stop Netdata
  block:
    - name: Stop Netdata
      community.docker.docker_container:
        name: "{{ netdata_container_name }}"
        state: absent
  when: netdata_enabled is false
