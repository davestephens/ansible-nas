---
- name: LibrePhotos
  block:
    - name: Create LibrePhotos Directories
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ librephotos_scan_directory }}"
        - "{{ librephotos_data_directory }}"
      when: (librephotos_enabled | default(False))

    - name: LibrePhotos Proxy Container
      docker_container:
        name: "{{ librephotos_container_name }}_proxy"
        image: "{{ librephotos_image_name }}-proxy:{{ librephotos_image_version }}"
        pull: true
        volumes:
          - "{{ librephotos_scan_directory }}:/data:rw"
          - "{{ librephotos_data_directory }}/protected_media:/protected_media:rw"
        ports:
          - "{{ librephotos_port }}:80"
        restart_policy: unless-stopped
        # memory: "{{ librephotos_memory }}"
        labels:
          traefik.enable: "{{ librephotos_available_externally | string }}"
          traefik.http.routers.librephotos.rule: "Host(`{{ librephotos_hostname }}.{{ ansible_nas_domain }}`)"
          traefik.http.routers.librephotos.tls.certresolver: "letsencrypt"
          traefik.http.routers.librephotos.tls.domains[0].main: "{{ ansible_nas_domain }}"
          traefik.http.routers.librephotos.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
          traefik.http.services.librephotos.loadbalancer.server.port: "4040"
      when: (librephotos_enabled | default(False))

    - name: LibrePhotos Database Container
      docker_container:
        name: "{{ librephotos_container_name }}_db"
        image: postgres:13
        pull: true
        volumes:
          - "{{ librephotos_data_directory }}/db:/var/lib/postgresql/data"
        restart_policy: unless-stopped
        memory: "{{ librephotos_memory }}"
        env:
          POSTGRES_USER: "{{ librephotos_dbUser }}"
          POSTGRES_PASSWORD: "{{ librephotos_dbPass }}"
          POSTGRES_DB: "{{ librephotos_dbName }}"
        command: postgres -c fsync=off -c synchronous_commit=off -c full_page_writes=off -c random_page_cost=1.0
        # healthcheck:
        #   test: psql -U ${dbUser} -d ${dbName} -c "SELECT 1;"
        #   interval: 5s
        #   timeout: 5s
        #   retries: 5
      when: (librephotos_enabled | default(False))

    - name: LibrePhotos Frontend
      docker_container:
        name: "{{ librephotos_container_name }}_frontend"
        image: "{{ librephotos_image_name }}-frontend:{{ librephotos_image_version }}"
        restart_policy: unless-stopped
      when: (librephotos_enabled | default(False))

    - name: LibrePhotos Backend
      docker_container:
        name: "{{ librephotos_container_name }}_backend"
        image: "{{ librephotos_container_name }}:{{ librephotos_image_version }}"
        restart_policy: unless-stopped
        volumes:
          - "{{ librephotos_scan_directory }}:/data"
          - "{{ librephotos_data_directory }}/protected_media:/protected_media"
          - "{{ librephotos_data_directory }}/logs:/logs"
          - "{{ librephotos_data_directory }}/cache:/root/.cache"
        env:
          SECRET_KEY: (librephotos_shhhhKey | default())
          BACKEND_HOST: librephotos_backend
          ADMIN_EMAIL: (librephotos_adminEmail | default())
          ADMIN_USERNAME: (librephotos_userName | default())
          ADMIN_PASSWORD: (librephotos_userPass | default())
          DB_BACKEND: postgresql
          DB_NAME: "{{ librephotos_dbName }}"
          DB_USER: "{{ librephotos_dbUser }}"
          DB_PASS: "{{ librephotos_dbPass }}"
          DB_HOST: "{{ librephotos_dbHost }}"
          DB_PORT: "5432"
          REDIS_HOST: redis
          REDIS_PORT: "6379"
          MAPBOX_API_KEY: (librephotos_mapApiKey | default())
          WEB_CONCURRENCY: (librephotos_gunniWorkers | default(1))
          SKIP_PATTERNS: (librephotos_skipPatterns | default())
          ALLOW_UPLOAD: (librephotos_allowUpload | default(false))
          DEBUG: "0"
          HEAVYWEIGHT_PROCESS: (librephotos_HEAVYWEIGHT_PROCESS | default())
      when: (librephotos_enabled | default(False))

    - name: LibrePhotos Redis
      docker_container:
        name: "{{ librephotos_container_name }}_redis"
        image: redis:6
        restart_policy: unless-stopped
        # healthcheck:
        #   test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
        #   interval: 5s
        #   timeout: 5s
        #   retries: 12
      when: (librephotos_enabled | default(False))

- name: Stop LibrePhotos
  block:
    - name: Stop LibrePhotos Containers
      docker_container:
        name: "{{ librephotos_container_name }}_{{ item }}"
        state: absent
      with_items:
        - proxy
        - db
        - frontend
        - backend
      when: (!librephotos_enabled)
