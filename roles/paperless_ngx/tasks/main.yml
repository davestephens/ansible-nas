---
- name: Start paperless_ngx
  block:
    - name: Create paperless_ngx directories
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ paperless_ng_postgres_directory }}"
        - "{{ paperless_ng_data_directory }}"
        - "{{ paperless_ng_export_directory }}"
        - "{{ paperless_ng_media_directory }}"
        - "{{ paperless_ng_consume_directory }}"
    # 1. create paperless_ngx network
    - name: Create paperless_ngx network
      docker_network:
        name: "{{ paperless_ng_container_network_name }}"

    # 2. paperless_ngx redis broker:
    - name: Create paperless_ngx redis broker
      docker_container:
        name: "{{ paperless_ng_container_name_redis }}"
        container_default_behavior: compatibility
        image: redis:7.0
        pull: true
        restart_policy: unless-stopped
        memory: "{{ paperless_ng_redis_memory }}"
        networks:
          - name: "{{ paperless_ng_container_network_name }}"

    # 3. Postgres database
    - name: Create paperless_ngx postgres Docker Container
      docker_container:
        name: "{{ paperless_ng_container_name_postgres }}"
        image: postgres:13
        container_default_behavior: compatibility
        pull: true
        volumes:
          - "{{ paperless_ng_postgres_directory }}:/var/lib/postgresql/data"
        env:
          POSTGRES_DB: "{{ paperless_ng_postgres_db }}"
          POSTGRES_USER: "{{ paperless_ng_postgres_user }}"
          POSTGRES_PASSWORD: "{{ paperless_ng_postgres_password }}"
        restart_policy: unless-stopped
        memory: "{{ paperless_ng_postgres_memory }}"
        networks:
          - name: "{{ paperless_ng_container_network_name }}"

    # 4. gotenberg
    - name: Create paperless_ngx gotenberg Docker Container
      docker_container:
        name: "{{ paperless_ng_container_name_gotenberg }}"
        image: docker.io/gotenberg/gotenberg:7.8
        restart_policy: unless-stopped
        container_default_behavior: compatibility
        # The gotenberg chromium route is used to convert .eml files. We do not
        # want to allow external content like tracking pixels or even javascript.
        command:
          - "gotenberg"
          - "--chromium-disable-javascript=true"
          - "--chromium-allow-list=file:///tmp/.*"
        memory: "{{ paperless_ng_gotenberg_memory }}"

    # 5. tika
    - name: Create paperless_ngx tika Docker Container
      docker_container:
        name: "{{ paperless_ng_container_name_tika }}"
        image: ghcr.io/paperless-ngx/tika:latest
        restart_policy: unless-stopped
        container_default_behavior: compatibility
        memory: "{{ paperless_ng_tika_memory }}"

    # 6. webserver
    - name: Create paperless_ngx UI Docker Container
      docker_container:
        name: "{{ paperless_ng_container_name_uiserver }}"
        image: ghcr.io/paperless-ngx/paperless-ngx:latest
        pull: true
        container_default_behavior: compatibility
        healthcheck:
          test: ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:8000"]
          interval: 30s
          timeout: 10s
          retries: 5
        volumes:
          - "{{ paperless_ng_data_directory }}:/usr/src/paperless/data"
          - "{{ paperless_ng_media_directory }}:/usr/src/paperless/media"
          - "{{ paperless_ng_export_directory }}:/usr/src/paperless/export"
          - "{{ paperless_ng_consume_directory }}:/usr/src/paperless/consume"
        ports:
          - "{{ paperless_ng_port }}:8000"
        env:
          PAPERLESS_REDIS: "redis://{{ paperless_ng_container_name_redis | string }}:6379"
          PAPERLESS_DBHOST: "{{ paperless_ng_container_name_postgres | string }}"
          USERMAP_UID: "{{ paperless_ng_user_id }}"
          USERMAP_GID: "{{ paperless_ng_group_id }}"
          PAPERLESS_TIKA_ENABLED: "1"
          PAPERLESS_TIKA_GOTENBERG_ENDPOINT: "http://{{ paperless_tika_gotenberg_name }}:3000"
          PAPERLESS_TIKA_ENDPOINT: "http://{{ paperless_tika_name }}:9998"
          PAPERLESS_OCR_LANGUAGES: "{{ paperless_ng_languages }}"
          # needed when exposing through traefik, or else CSRF will trigger
          PAPERLESS_URL: "https://{{ paperless_ng_hostname }}.{{ ansible_nas_domain }}"
          PAPERLESS_SECRET_KEY: "{{ paperless_secret_key }}"
          # when set allows automatically creating admin user
          PAPERLESS_ADMIN_USER: "{{ paperless_admin_user }}"
          PAPERLESS_ADMIN_PASSWORD: "{{ paperless_admin_password }}"
          PAPERLESS_ADMIN_MAIL: "{{ paperless_admin_mail }}"

        restart_policy: unless-stopped
        memory: "{{ paperless_ng_ui_memory }}"
        networks:
          - name: "{{ paperless_ng_container_network_name }}"
        labels:
          traefik.enable: "{{ paperless_ngx_available_externally | string }}"
          traefik.http.routers.paperlessngx.rule: "Host(`{{ paperless_ng_hostname }}.{{ ansible_nas_domain }}`)"
          traefik.http.routers.paperlessngx.tls.certresolver: "letsencrypt"
          traefik.http.routers.paperlessngx.tls.domains[0].main: "{{ ansible_nas_domain }}"
          traefik.http.routers.paperlessngx.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
          traefik.http.services.paperlessngx.loadbalancer.server.port: "8000"
  when: paperless_ngx_enabled is true

- name: Stop paperless_ngx
  block:
    # 1. webserver
    - name: Stop paperless_ngx UI Docker Container
      docker_container:
        name: "{{ paperless_ng_container_name_uiserver }}"
        state: absent
    # 2. tika
    - name: Stop paperless_ngx tika Docker Container
      docker_container:
        name: "{{ paperless_ng_container_name_tika }}"
        state: absent
    # 3. gotenberg
    - name: Stop paperless_ngx gotenberg Docker Container
      docker_container:
        name: "{{ paperless_ng_container_name_gotenberg }}"
        state: absent
    # 4. Postgres database
    - name: Stop paperless_ngx postgres Docker Container
      docker_container:
        name: "{{ paperless_ng_container_name_postgres }}"
        state: absent
    # 5. paperless_ngx redis broker
    - name: Stop paperless_ngx redis broker
      docker_container:
        name: "{{ paperless_ng_container_name_redis }}"
        state: absent
    # 6. Docker network for paperless_ngx
    - name: Remove paperless_ngx network
      docker_network:
        name: "{{ paperless_ng_container_network_name }}"
        state: absent
  when: paperless_ngx_enabled is false
