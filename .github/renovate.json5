{
  enabled: true,
  ignorePaths: [
    "**/velero/**",
    "**/cloudflare-ddns/**"
    ],
  semanticCommits: 'enabled',
  dependencyDashboard: true,
  dependencyDashboardTitle: 'Renovate Dashboard ðŸ¤–',
  suppressNotifications: ['prIgnoreNotification'],
  rebaseWhen: 'conflicted',
  schedule: [
    'after 10pm every weekday',
    'before 5am every weekday',
    'every weekend'
  ],
  'pre-commit': {
    enabled: true
  },
  flux: {
    fileMatch: ['cluster/.+\\.ya?ml$']
  },
  'helm-values': {
    fileMatch: ['cluster/.+\\.ya?ml$']
  },
  kubernetes: {
    fileMatch: ['cluster/.+\\.ya?ml$', 'provision/ansible/.+\\.ya?ml.j2$']
  },
  regexManagers: [
    {
      description: 'Process CRD dependencies',
      fileMatch: ['cluster/crds/.+\\.ya?ml$'],
      matchStrings: [
        // GitRepository and Flux Kustomization where 'Git release/tag' matches 'Helm' version
        'registryUrl=(?<registryUrl>\\S+) chart=(?<depName>\\S+)\n.*?(?<currentValue>[^-\\s]*)\n',
        // Kustomization where 'GitHub release artifact URL' matches 'Docker image' version
        'datasource=(?<datasource>\\S+) image=(?<depName>\\S+)\n.*?-\\s(.*?)/(?<currentValue>[^/]+)/[^/]+\n'
      ],
      datasourceTemplate: '{{#if datasource}}{{{datasource}}}{{else}}helm{{/if}}'
    },
    {
      description: 'Process various other dependencies',
      fileMatch: ['provision/ansible/.+\\.ya?ml$', 'cluster/.+\\.ya?ml$'],
      matchStrings: [
        'datasource=(?<datasource>\\S+) depName=(?<depName>\\S+)( versioning=(?<versioning>\\S+))?\n.*?"(?<currentValue>.*)"\n'
      ],
      datasourceTemplate: '{{#if datasource}}{{{datasource}}}{{else}}github-releases{{/if}}',
      versioningTemplate: '{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}'
    }
  ],
  packageRules: [
    // setup datasources
    {
      matchDatasources: ['helm'],
      separateMinorPatch: true,
      ignoreDeprecated: true
    },
    // global docker datasource settings
    {
      matchDatasources: ['docker'],
      enabled: true,
      commitMessageTopic: 'container image {{depName}}',
      commitMessageExtra: 'to {{#if isSingleVersion}}v{{{newVersion}}}{{else}}{{{newValue}}}{{/if}}',
      matchUpdateTypes: ['major', 'minor', 'patch']
    },
    {
      description: 'Group Cert-Manager image (for CRDs) and chart',
      groupName: 'Cert-Manager',
      matchPackagePatterns: ['cert-manager'],
      matchDatasources: ['docker', 'helm'],
      group: { commitMessageTopic: '{{{groupName}}} group' },
      separateMinorPatch: true
    },
    // add labels according to package and update types
    {
      matchDatasources: ['docker'],
      matchUpdateTypes: ['major'],
      labels: ['renovate/image', 'dep/major']
    },
    {
      matchDatasources: ['docker'],
      matchUpdateTypes: ['minor'],
      labels: ['renovate/image', 'dep/minor']
    },
    {
      matchDatasources: ['docker'],
      matchUpdateTypes: ['patch'],
      labels: ['renovate/image', 'dep/patch']
    },
    {
      matchDatasources: ['helm'],
      matchUpdateTypes: ['major'],
      labels: ['renovate/helm', 'dep/major']
    },
    {
      matchDatasources: ['helm'],
      matchUpdateTypes: ['minor'],
      labels: ['renovate/helm', 'dep/minor']
    },
    {
      matchDatasources: ['helm'],
      matchUpdateTypes: ['patch'],
      labels: ['renovate/helm', 'dep/patch']
    }
  ]
}